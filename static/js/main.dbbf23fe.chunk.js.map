{"version":3,"sources":["types/ScreenType.ts","types/Tile.ts","services/WallGenerator.ts","services/TempaiService.ts","services/HandService.ts","types/ProcessingState.ts","services/SettingsStorage.ts","services/StateService.ts","services/TileService.ts","components/TileVisual.tsx","components/ExampleHandVisual.tsx","screens/RulesScreen.tsx","components/HandVisual.tsx","components/Footer.tsx","screens/MemorizingScreen.tsx","components/DiscardVisual.tsx","screens/ProcessingScreen.tsx","components/NewGameBtn.tsx","screens/SuccessScreen.tsx","screens/FailScreen.tsx","screens/AboutScreen.tsx","components/Switch.tsx","screens/SettingsScreen.tsx","screens/Main.tsx","services/SpriteLoader.ts","App.tsx","services/Ulils.ts","serviceWorker.ts","index.tsx"],"names":["ScreenType","SuitType","WaitPatternType","WallGenerator","tiles","this","initTiles","randomShuffle","slice","i","addTileType","MANZU","PINZU","SOUZU","JIHAI","suit","value","tile","push","Object","assign","sort","Math","random","rand","shuffled","shuffle","HandService","wall","deadWall","hand","discard","tsumo","kanTiles","sortTiles","generate","trySortHand","undefined","getHand","allTiles","concat","reduce","a","b","key","getSuitStr","sorted","sortHandler","man","filter","x","length","map","join","pin","sou","honors","discardTile","tsumogiri","index","splice","unshift","ProcessingState","TempaiService","suits","getSuits","isChiitoi","isKokushiMuso","manSuits","manSuit","run","getSimpleSuitStructure","pinSuits","pinSuit","souSuits","souSuit","possibleManSuits","getPossibleStructures","possiblePinSuits","possibleSouSuits","possibleHonors","handWaitStructures","processPossibleManSuits","handWaitStructure","isReadyHand","console","log","processPossiblePinSuits","handPatterns","manStructure","processPossibleSouSuits","pinStructure","processPossibleHonors","souStructure","honorStructure","pairsCount","waits","pair","waitPatterns","type","TANKI","every","pattern","SHANPON","KANCHAN","RYANMEN_PENCHAN","includes","structures","structure","isPossibleWaitPatterns","patterns","manPairs","getPairs","pinPairs","souPairs","honorPairs","terminalsHonorsRegex","RegExp","test","manTiles","pinTiles","souTiles","honorTiles","allPairs","remainingManSuit","replace","toString","remainingPinSuit","remainingSouSuit","remainingHonors","remainingHand","regex","matches","match","Error","split","Number","sets","unusedTiles","remainingTiles","allVariations","isHonors","trySetStructure","getSets","set","newStructure","nextTiles","parentStructure","n","data","getPairsAndWaitings","availablePair","pairTile","waitPattern","getWaitPatternFrom","find","str","chii","getChii","pon","getPon","handPart","unique","indexOf","pairs","includesFrom","next1","next2","SettingsStorage","settings","readSettings","_instance","setItem","useTimer","rememberTime","dropTime","invertTiles","hideTiles","hasVisited","getBoolValue","getIntValue","defaultSettings","isDefault","getDefault","localStorage","getItem","defaultValue","getValue","intValue","parseInt","isSafeInteger","StateService","handService","tempaiService","settingsStorage","instance","initialized","_currentScreen","previousScreen","showRules","processingState","IDLE","_remainingTime","timer","onChange","signals","Signal","onHandChanged","onTimeChanged","onProcessingStateChanged","setFirstScreen","getSettings","MEMORIZING","RULES","window","setSettings","setScreen","generateHand","nextTile","PROCESSING","FAIL","SUCCESS","ABOUT","SETTINGS","screen","clear","dispatch","clearTimer","setTimeout","onTimerTick","nextScreen","dropTile","hasTiles","setTimer","clearTimeout","tryInvertIndex","dropTileWithTimeout","CHOOSE_TEMPAI","checkTempai","CHOOSE_KAN","tryCallKan","getStr","hasTempai","dropTsumo","dropFromHand","currentScreen","getTsumo","getKanTiles","count","getDiscard","sec","min","round","secStr","TileService","getManTile","getPinTile","getSouTile","getJihaiTile","TileVisual","props","stateService","state","isDropped","add","updateState","remove","setState","selectable","selectTile","className","isTsumo","highlighted","onClick","onTileSelected","isFallen","hidden","viewBox","xlinkHref","getSvg","React","ExampleHandVisual","getTile","RulesScreen","openSettings","onOkClick","HandVisual","reverse","bind","getAllKanTiles","getKanTile","hiddenTiles","array","Array","isArray","isOpenHand","names","getClassName","getKans","Footer","openRules","openAbout","onRulesClick","onSettingsClick","onAboutClick","MemorizingScreen","remainingTime","remainingTimeStr","goNext","DiscardVisual","line","ProcessingScreen","canCall","chooseTempaiClicked","chooseKanClicked","onKanClick","onTempaiClick","onGiveUpClick","NewGameBtn","ym","onNewGameClick","SuccessScreen","FailScreen","AboutScreen","href","target","Switch","onToggle","switched","SettingsScreen","newValue","setValue","item","event","isValidTime","validity","valid","onDefaultSettingsClick","onUseTimerClick","onInput","rememberTimeChange","dropTimeChange","onSortTilesClick","onInvertTilesClick","onHideTilesClick","Main","fetch","then","res","clone","response","text","spriteHtml","node","document","querySelector","innerHTML","body","appendChild","App","loadSpriteAsync","navigator","userAgent","classList","Boolean","location","hostname","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dbbf23fe.chunk.js","sourcesContent":["export enum ScreenType {\n    RULES,\n    MEMORIZING,\n    PROCESSING,\n    SUCCESS,\n    FAIL,\n    ABOUT   ,\n    SETTINGS,\n}","export interface Tile {\n    suit: SuitType\n    value: number\n}\n\nexport interface DiscardTile {\n    suit: SuitType\n    value: number\n    tsumogiri: boolean\n}\n\nexport enum SuitType {\n    MANZU,\n    PINZU,\n    SOUZU,\n    JIHAI\n}","import {SuitType, Tile} from \"../types/Tile\";\n\nexport class WallGenerator {\n    static generate() {\n        let tiles = this.initTiles()\n\n        return this.randomShuffle(tiles).slice(0,34)\n    }\n\n    private static initTiles(): Tile[] {\n        let tiles: Tile[] = []\n        for (let i = 1; i < 10; i++) {\n            this.addTileType(tiles, SuitType.MANZU, i)\n            this.addTileType(tiles, SuitType.PINZU, i)\n            this.addTileType(tiles, SuitType.SOUZU, i)\n\n            if (i < 8) {\n                this.addTileType(tiles, SuitType.JIHAI, i)\n            }\n\n        }\n        return tiles\n    }\n\n    private static addTileType(tiles: Tile[], suit: SuitType, value: number) {\n        let tile = <Tile>{\n            suit,\n            value,\n        }\n\n        tiles.push(tile)\n        tiles.push(Object.assign({}, tile))\n        tiles.push(Object.assign({}, tile))\n        tiles.push(Object.assign({}, tile))\n    }\n\n    private static shuffle(tiles: Tile[]): Tile[] {\n        return tiles.sort(function() {return 0.5 - Math.random()});\n    }\n\n    private static randomShuffle(tiles: Tile[]): Tile[] {\n        let rand = 1 + Math.random() * 10\n        let shuffled = tiles\n        for(let i = 0; i < rand; i++) {\n            shuffled = this.shuffle(shuffled)\n        }\n\n        return shuffled;\n    }\n}\n\n","//todo add DI\n\nenum WaitPatternType {\n    TANKI,\n    SHANPON,\n    KANCHAN,\n    RYANMEN_PENCHAN,\n}\n\ninterface WaitPattern {\n    tiles: number[]\n    type: WaitPatternType\n}\n\ninterface SuitStructure {\n    sets: number[][]\n    unusedTiles: number[]\n    waitPatterns: WaitPattern[]\n    pair: number | undefined\n    remainingTiles: number[]\n}\n\ninterface HandStructure {\n    manSuit?: number[]\n    pinSuit?: number[]\n    souSuit?: number[]\n    honors?: number[]\n}\n\ninterface HandWaitStructure {\n    man?: SuitStructure\n    pin?: SuitStructure\n    sou?: SuitStructure\n    honors?: SuitStructure\n}\n\nexport class TempaiService {\n    hasTempai(hand: string): boolean {\n        let suits = this.getSuits(hand)\n\n        if (this.isChiitoi(suits) || this.isKokushiMuso(suits, hand)) {\n            return true\n        }\n\n        let manSuits = suits.manSuit && this.run([], this.getSimpleSuitStructure(suits.manSuit))\n        let pinSuits = suits.pinSuit && this.run([], this.getSimpleSuitStructure(suits.pinSuit))\n        let souSuits = suits.souSuit && this.run([], this.getSimpleSuitStructure(suits.souSuit))\n        let honors = suits.honors && this.run([], this.getSimpleSuitStructure(suits.honors))\n\n        let possibleManSuits = this.getPossibleStructures(manSuits)\n        let possiblePinSuits = this.getPossibleStructures(pinSuits)\n        let possibleSouSuits = this.getPossibleStructures(souSuits)\n        let possibleHonors = this.getPossibleStructures(honors)\n\n        if (\n            !!suits.manSuit !== (possibleManSuits.length !== 0) ||\n            !!suits.pinSuit !== (possiblePinSuits.length !== 0) ||\n            !!suits.souSuit !== (possibleSouSuits.length !== 0) ||\n            !!suits.honors !== (possibleHonors.length !== 0)\n        ) {\n            return false\n        }\n\n        let handWaitStructures: HandWaitStructure[] =\n            this.processPossibleManSuits(possibleManSuits, possiblePinSuits, possibleSouSuits, possibleHonors)\n\n        for (let handWaitStructure of handWaitStructures) {\n            if (this.isReadyHand(handWaitStructure)) {\n                return true\n            }\n        }\n\n        console.log(handWaitStructures)\n        return false\n    }\n\n    private processPossibleManSuits(\n        possibleManSuits: SuitStructure[],\n        possiblePinSuits: SuitStructure[],\n        possibleSouSuits: SuitStructure[],\n        possibleHonors: SuitStructure[]\n    ) {\n        if (!possibleManSuits.length) {\n            return this.processPossiblePinSuits(undefined, possiblePinSuits, possibleSouSuits, possibleHonors)\n        }\n\n        let handPatterns: HandWaitStructure[] = []\n        for (let manStructure of possibleManSuits) {\n            handPatterns.push(\n                ...this.processPossiblePinSuits(manStructure, possiblePinSuits, possibleSouSuits, possibleHonors)\n            )\n        }\n        return handPatterns\n    }\n\n    private processPossiblePinSuits(\n        manStructure: SuitStructure | undefined,\n        possiblePinSuits: SuitStructure[],\n        possibleSouSuits: SuitStructure[],\n        possibleHonors: SuitStructure[]\n    ) {\n        if (!possiblePinSuits.length) {\n            return this.processPossibleSouSuits(manStructure, undefined, possibleSouSuits, possibleHonors)\n        }\n\n        let handPatterns: HandWaitStructure[] = []\n        for (let pinStructure of possiblePinSuits) {\n            handPatterns.push(...this.processPossibleSouSuits(manStructure, pinStructure, possibleSouSuits, possibleHonors))\n        }\n        return handPatterns\n    }\n\n    private processPossibleSouSuits(\n        manStructure: SuitStructure | undefined,\n        pinStructure: SuitStructure | undefined,\n        possibleSouSuits: SuitStructure[],\n        possibleHonors: SuitStructure[]\n    ) {\n        if (!possibleSouSuits.length) {\n            return this.processPossibleHonors(manStructure, pinStructure, undefined, possibleHonors)\n        }\n\n        let handPatterns: HandWaitStructure[] = []\n        for (let souStructure of possibleSouSuits) {\n            handPatterns.push(...this.processPossibleHonors(manStructure, pinStructure, souStructure, possibleHonors))\n        }\n        return handPatterns\n    }\n\n    private processPossibleHonors(\n        manStructure: SuitStructure | undefined,\n        pinStructure: SuitStructure | undefined,\n        souStructure: SuitStructure | undefined,\n        possibleHonors: SuitStructure[]\n    ) {\n        if (!possibleHonors.length) {\n            return [\n                <HandWaitStructure>{\n                    man: manStructure,\n                    pin: pinStructure,\n                    sou: souStructure,\n                },\n            ]\n        }\n\n        let handPatterns: HandWaitStructure[] = []\n        for (let honorStructure of possibleHonors) {\n            handPatterns.push(<HandWaitStructure>{\n                man: manStructure,\n                pin: pinStructure,\n                sou: souStructure,\n                honors: honorStructure,\n            })\n        }\n\n        return handPatterns\n    }\n\n    private isReadyHand(hand: HandWaitStructure) {\n        let pairsCount = 0\n        let waits: WaitPattern[] = []\n        if (hand.man) {\n            if (hand.man.pair) {\n                pairsCount++\n            }\n            waits.push(...hand.man.waitPatterns)\n        }\n        if (hand.pin) {\n            if (hand.pin.pair) {\n                pairsCount++\n            }\n            waits.push(...hand.pin.waitPatterns)\n        }\n        if (hand.sou) {\n            if (hand.sou.pair) {\n                pairsCount++\n            }\n            waits.push(...hand.sou.waitPatterns)\n        }\n        if (hand.honors) {\n            if (hand.honors.pair) {\n                pairsCount++\n            }\n            waits.push(...hand.honors.waitPatterns)\n        }\n\n        if (pairsCount > 2 || waits.length > 2) {\n            return false\n        }\n\n        if (pairsCount === 2 && waits.length === 0) {\n            return true //SHANPON\n        }\n\n        if (\n            pairsCount === 0 &&\n            ((waits.length === 1 && waits[0].type === WaitPatternType.TANKI) ||\n                (waits.length === 2 && waits.every(pattern => pattern.type === WaitPatternType.SHANPON)))\n        ) {\n            return true\n        }\n\n        if (\n            pairsCount === 1 &&\n            waits.length === 1 &&\n            [WaitPatternType.KANCHAN, WaitPatternType.RYANMEN_PENCHAN].includes(waits[0].type)\n        ) {\n            return true\n        }\n\n        return false\n    }\n\n    private getPossibleStructures(structures: SuitStructure[] | undefined): SuitStructure[] {\n        if (!structures || !structures.length) {\n            return []\n        }\n\n        return structures.filter(structure => this.isPossibleWaitPatterns(structure.waitPatterns))\n    }\n\n    private isPossibleWaitPatterns(patterns: WaitPattern[]): boolean {\n        if (!patterns.length) {\n            return true\n        }\n        if (patterns.length > 2) {\n            return false\n        }\n        if (\n            patterns.length === 1 &&\n            [WaitPatternType.TANKI, WaitPatternType.KANCHAN, WaitPatternType.RYANMEN_PENCHAN].includes(patterns[0].type)\n        ) {\n            return true\n        }\n        if (patterns.length === 2 && patterns.every(pattern => pattern.type === WaitPatternType.SHANPON)) {\n            return true\n        }\n        return false\n    }\n\n    //OrSimpleTankiRyanpeikou\n    private isChiitoi(suits: HandStructure) {\n        let manPairs = suits.manSuit ? this.getPairs(suits.manSuit) : []\n        let pinPairs = suits.pinSuit ? this.getPairs(suits.pinSuit) : []\n        let souPairs = suits.souSuit ? this.getPairs(suits.souSuit) : []\n        let honorPairs = suits.honors ? this.getPairs(suits.honors) : []\n\n        let allPairsCount = manPairs.length + pinPairs.length + souPairs.length + honorPairs.length\n        return allPairsCount === 6\n    }\n\n    private isKokushiMuso(suits: HandStructure, hand: string) {\n        let terminalsHonorsRegex = new RegExp('^[1,9]{1,3}m[1,9]{1,3}p[1,9]{1,3}s[1-7]{6,8}z$')\n\n        if (hand.length !== 17 || !terminalsHonorsRegex.test(hand)) {\n            return false\n        }\n\n        let manTiles = suits.manSuit!\n        let pinTiles = suits.pinSuit!\n        let souTiles = suits.souSuit!\n        let honorTiles = suits.honors!\n\n        let manPairs = this.getPairs(manTiles)\n        let pinPairs = this.getPairs(pinTiles)\n        let souPairs = this.getPairs(souTiles)\n        let honorPairs = this.getPairs(honorTiles)\n\n        let allPairs = [...manPairs, ...pinPairs, ...souPairs, ...honorPairs]\n\n        if (allPairs.length > 1) {\n            return false\n        }\n\n        //13 way wait\n        if (!allPairs.length) {\n            let simpleWaitRegex = new RegExp('^19m19p19s1234567z$')\n            return simpleWaitRegex.test(hand)\n        }\n\n        let remainingManSuit = manPairs.length ? manTiles.join('').replace(manPairs[0].toString(), '') : manTiles.join('')\n        let remainingPinSuit = pinPairs.length ? pinTiles.join('').replace(pinPairs[0].toString(), '') : pinTiles.join('')\n        let remainingSouSuit = souPairs.length ? souTiles.join('').replace(souPairs[0].toString(), '') : souTiles.join('')\n        let remainingHonors = honorPairs.length\n            ? honorTiles.join('').replace(honorPairs[0].toString(), '')\n            : honorTiles.join('')\n\n        let remainingHand = `${remainingManSuit}m${remainingPinSuit}p${remainingSouSuit}s${remainingHonors}z`\n\n        let regex = new RegExp(\n            '^([19]m[19]{2}p[19]{2}s[1-7]{7}z|[19]{2}m[19]p[19]{2}s[1-7]{7}z|[19]{2}m[19]{2}p[19]s[1-7]{7}z|[19]{2}m[19]{2}p[19]{2}s[1-7]{6}z)$'\n        )\n        return regex.test(remainingHand)\n    }\n\n    //check isHonors for getWaitPatterns!\n    private getSuits(hand: string): HandStructure {\n        let regex = new RegExp('^(([1-9]*)m)?(([1-9]*)p)?(([1-9]*)s)?(([1-7]*)z)?$')\n        let matches = hand.match(regex)\n        if (!matches) {\n            throw new Error('incorrect hand structure')\n        }\n\n        let manTiles = matches[2] ? matches[2].split('').map(x => Number(x)) : undefined\n        let pinTiles = matches[4] ? matches[4].split('').map(x => Number(x)) : undefined\n        let souTiles = matches[6] ? matches[6].split('').map(x => Number(x)) : undefined\n        let honorTiles = matches[8] ? matches[8].split('').map(x => Number(x)) : undefined\n\n        return <HandStructure>{\n            manSuit: manTiles,\n            pinSuit: pinTiles,\n            souSuit: souTiles,\n            honors: honorTiles,\n        }\n    }\n\n    private getSimpleSuitStructure(tiles: number[]): SuitStructure {\n        return <SuitStructure>{\n            sets: [],\n            unusedTiles: [],\n            waitPatterns: [],\n            pair: undefined,\n            remainingTiles: tiles,\n        }\n    }\n\n    private run(allVariations: SuitStructure[], structure: SuitStructure, isHonors: boolean = false): SuitStructure[] {\n        if (structure.remainingTiles.length < 3) {\n            structure.unusedTiles = structure.unusedTiles.concat(structure.remainingTiles)\n            structure.remainingTiles = []\n            // return [structure]\n            this.trySetStructure(allVariations, structure, isHonors)\n            return allVariations\n        }\n\n        let unusedTiles = structure.unusedTiles.slice(0)\n        let remainingHand = structure.remainingTiles.slice(0)\n\n        // let childStructures: HandStructure[] = []\n        for (let tile of structure.remainingTiles) {\n            let sets = this.getSets(tile, remainingHand)\n            for (let set of sets) {\n                let newStructure = <SuitStructure>{\n                    sets: structure.sets.length ? structure.sets.concat([set]) : [set],\n                    remainingTiles: this.nextTiles(remainingHand, ...set),\n                    unusedTiles: unusedTiles.slice(0),\n                }\n                this.run(allVariations, newStructure, isHonors)\n            }\n            unusedTiles.push(tile)\n            remainingHand = this.nextTiles(remainingHand, tile)\n        }\n\n        let parentStructure = <SuitStructure>{\n            sets: structure.sets,\n            remainingTiles: remainingHand,\n            unusedTiles: unusedTiles,\n        }\n        this.trySetStructure(allVariations, parentStructure, isHonors)\n\n        return allVariations\n    }\n\n    private trySetStructure(allVariations: SuitStructure[], structure: SuitStructure, isHonors: boolean) {\n        let possibleStructures = allVariations.filter(\n            x =>\n                x.sets.length === structure.sets.length &&\n                x.unusedTiles.join('') === structure.unusedTiles.join('') &&\n                x.sets.map(n => n.join('')).join(' ') === structure.sets.map(n => n.join('')).join(' ')\n        )\n\n        if (!possibleStructures.length) {\n            let data = this.getPairsAndWaitings(structure.unusedTiles, isHonors)\n            structure.pair = data.pair\n            structure.waitPatterns = data.waitPatterns\n            allVariations.push(structure)\n        }\n    }\n\n    private getPairsAndWaitings(\n        unusedTiles: number[],\n        isHonors: boolean\n    ): {pair: number | undefined; waitPatterns: WaitPattern[]} {\n        let allPairs = this.getPairs(unusedTiles)\n\n        let availablePair: number | undefined\n        let remainingTiles = unusedTiles.slice(0)\n\n        //if wait pattern is shanpon or hand has too mush pairs or pair and other tiles -> there is no pair, it's waitings\n        if (allPairs.length === 1) {\n            availablePair = allPairs[0]\n            let pairTile = allPairs[0]\n            remainingTiles = this.nextTiles(remainingTiles, pairTile, pairTile)\n        }\n        if (!remainingTiles.length) {\n            return {pair: availablePair, waitPatterns: []}\n        }\n\n        let waitPatterns: WaitPattern[] = []\n        while (remainingTiles.length) {\n            let waitPattern = this.getWaitPatternFrom(remainingTiles[0], remainingTiles, isHonors)\n            waitPatterns.push(waitPattern)\n            remainingTiles = this.nextTiles(remainingTiles, ...waitPattern.tiles)\n        }\n\n        //it's impossible hand contains pair and tanki wait\n        if (waitPatterns.find(x => x.type === WaitPatternType.TANKI)) {\n            availablePair = undefined\n            waitPatterns = []\n            remainingTiles = unusedTiles.slice(0)\n            while (remainingTiles.length) {\n                let waitPattern = this.getWaitPatternFrom(remainingTiles[0], remainingTiles, isHonors)\n                waitPatterns.push(waitPattern)\n                remainingTiles = this.nextTiles(remainingTiles, ...waitPattern.tiles)\n            }\n        }\n\n        return {pair: availablePair, waitPatterns: waitPatterns}\n    }\n\n    private nextTiles(hand: number[], ...tiles: number[]): number[] {\n        let str = hand.join('')\n        for (let tile of tiles) {\n            str = str.replace(tile.toString(), '')\n        }\n        return str.split('').map(x => Number(x))\n    }\n\n    private getSets(tile: number, str: number[]): number[][] {\n        let sets: number[][] = []\n        let chii = this.getChii(tile, str)\n        if (chii) {\n            sets.push(chii)\n        }\n\n        let pon = this.getPon(tile, str)\n        if (pon) {\n            sets.push(pon)\n        }\n        return sets\n    }\n\n    private includesFrom(handPart: number[], ...tiles: number[]) {\n        let str = handPart.join('')\n        for (let tile of tiles) {\n            if (!str.includes(tile.toString())) {\n                return false\n            }\n\n            str = str.replace(tile.toString(), '')\n        }\n        return true\n    }\n\n    private getPairs(handPart: number[]): number[] {\n        let unique = handPart.filter((x, i, a) => a.indexOf(x) == i)\n        let pairs: number[] = []\n        for (let tile of unique) {\n            if (this.includesFrom(handPart, tile, tile)) {\n                pairs.push(tile)\n            }\n        }\n\n        return pairs\n    }\n\n    private getChii(tile: number, handPart: number[]): number[] | undefined {\n        if (tile >= 8) {\n            return undefined\n        }\n\n        let next1 = tile + 1\n        let next2 = tile + 2\n        if (this.includesFrom(handPart, tile, next1, next2)) {\n            return [tile, next1, next2]\n        }\n\n        return undefined\n    }\n\n    private getPon(tile: number, handPart: number[]): number[] | undefined {\n        if (this.includesFrom(handPart, tile, tile, tile)) {\n            return [tile, tile, tile]\n        }\n        return undefined\n    }\n\n    private getWaitPatternFrom(tile: number, handPart: number[], isHonors: boolean): WaitPattern {\n        if (this.includesFrom(handPart, tile, tile)) {\n            return <WaitPattern>{\n                tiles: [tile, tile],\n                type: WaitPatternType.SHANPON,\n            }\n        }\n\n        if (tile === 9 || isHonors) {\n            //not shanpon => only tanki\n            return <WaitPattern>{\n                tiles: [tile],\n                type: WaitPatternType.TANKI,\n            }\n        }\n\n        let next1 = tile + 1\n        if (this.includesFrom(handPart, tile, next1)) {\n            return <WaitPattern>{\n                tiles: [tile, next1],\n                type: WaitPatternType.RYANMEN_PENCHAN,\n            }\n        }\n\n        if (tile === 8) {\n            //not shanpon, ryanmen or penchan => only tanki\n            return <WaitPattern>{\n                tiles: [tile],\n                type: WaitPatternType.TANKI,\n            }\n        }\n\n        let next2 = tile + 2\n        if (this.includesFrom(handPart, tile, next2)) {\n            return <WaitPattern>{\n                tiles: [tile, next2],\n                type: WaitPatternType.KANCHAN,\n            }\n        }\n\n        //only tanki\n        return <WaitPattern>{\n            tiles: [tile],\n            type: WaitPatternType.TANKI,\n        }\n    }\n}","import {DiscardTile, SuitType, Tile} from '../types/Tile'\nimport {WallGenerator} from \"./WallGenerator\";\n\nexport class HandService {\n    private wall: Tile[] = []\n    private deadWall: Tile[] = []\n    private hand: Tile[] = []\n    private discard: DiscardTile[] = []\n    private tsumo: Tile | undefined\n    private kanTiles: Tile[] = []\n    private sortTiles: boolean = false\n\n    generate(sortTiles: boolean): Tile[]  {\n        this.sortTiles = sortTiles\n        let wall = WallGenerator.generate()\n\n        this.hand = wall.slice(0,13)\n        this.trySortHand()\n\n        this.wall = wall.slice(13, 30)\n        this.deadWall = wall.slice(30)\n        this.discard = []\n        this.kanTiles = []\n        this.tsumo = undefined\n\n        return this.getHand()\n    }\n\n    getHand(): Tile[] {\n        return this.hand.slice(0)\n    }\n\n    getTsumo(): Tile | undefined {\n        return this.tsumo\n    }\n\n    getKanTiles(): Tile[] {\n        return this.kanTiles.slice(0)\n    }\n\n    //for sdk\n    getWall(): Tile[] {\n        return this.wall.slice(0)\n    }\n\n    //for sdk\n    getGroups() {\n        let allTiles =  this.wall.concat(this.getHand())\n        if (this.tsumo) {\n            allTiles = allTiles.concat(this.tsumo)\n        }\n\n        return allTiles.reduce((a: any, b)=> {\n            let key = `${b.value}${this.getSuitStr(b.suit)}`\n\n            if (a[key]) {\n                a[key]++\n\n            } else {\n                a[key] = 1\n            }\n\n            return a\n        }, {})\n    }\n\n    private getSuitStr(suit: SuitType) {\n        switch (suit) {\n            case SuitType.MANZU:\n                return 'm'\n            case SuitType.PINZU:\n                return 'p'\n            case SuitType.SOUZU:\n                return 's'\n            case SuitType.JIHAI:\n                return 'z'\n        }\n    }\n\n    get remainingTiles(): number {\n        return this.wall.length\n    }\n\n    getDiscard(): DiscardTile[] {\n        return this.discard.slice(0)\n    }\n\n    get hasTiles(): boolean {\n        return !!this.wall.length\n    }\n\n    getStr(): string {\n        let sorted = this.hand.slice(0).sort(this.sortHandler)\n        let hand = ''\n\n        let man = sorted.filter(x => x.suit === SuitType.MANZU)\n        if (man.length) {\n            hand += man.map(x => x.value).join('') + 'm'\n        }\n\n        let pin = sorted.filter(x => x.suit === SuitType.PINZU)\n        if (pin.length) {\n            hand += pin.map(x => x.value).join('') + 'p'\n        }\n\n        let sou = sorted.filter(x => x.suit === SuitType.SOUZU)\n        if (sou.length) {\n            hand += sou.map(x => x.value).join('') + 's'\n        }\n\n        let honors = sorted.filter(x => x.suit === SuitType.JIHAI)\n        if (honors.length) {\n            hand += honors.map(x => x.value).join('') + 'z'\n        }\n\n        return hand\n    }\n\n    nextTile(): Tile {\n        let tile = this.wall[0]\n        this.wall = this.wall.slice(1)\n        this.tsumo = tile\n        return tile\n    }\n\n    dropTsumo(): Tile[] {\n        if (this.tsumo) {\n            let discardTile = <DiscardTile>{\n                suit: this.tsumo.suit,\n                value: this.tsumo.value,\n                tsumogiri: true,\n            }\n\n            this.discard.push(discardTile)\n            this.tsumo = undefined\n        }\n\n        return this.getHand()\n    }\n\n    dropFromHand(index: number): Tile[] {\n        if (this.tsumo) {\n            let tile = this.hand[index]\n            let discardTile = <DiscardTile>{\n                suit: tile.suit,\n                value: tile.value,\n                tsumogiri: false,\n            }\n            this.discard.push(discardTile)\n\n            this.hand.splice(index, 1)\n            this.hand.unshift(this.tsumo)\n            this.trySortHand()\n\n            this.tsumo = undefined\n        }\n\n        return this.getHand()\n    }\n\n    tryCallKan(index: number): boolean {\n        if (!this.tsumo) {\n            return false\n        }\n\n        let allTiles = [this.tsumo, ...this.hand.slice()]\n        let tile = index === -1 ? this.tsumo : this.hand[index]\n\n        let count = allTiles.filter(x => x.value === tile.value && x.suit === tile.suit).length\n        if (count !== 4) {\n            return false\n        }\n\n        this.kanTiles.unshift(tile)\n        this.hand = allTiles.filter(x => x.value !== tile.value || x.suit !== tile.suit)\n        this.trySortHand()\n\n        this.tsumo = this.deadWall[0]\n        this.deadWall = this.deadWall.slice(1)\n\n        return true\n    }\n\n    private trySortHand() {\n        if (this.sortTiles) {\n            this.hand.sort(this.sortHandler)\n        }\n    }\n\n    private sortHandler(a: Tile, b: Tile) {\n        if (a.suit === b.suit)\n            return a.value - b.value\n\n        return a.suit - b.suit\n    }\n}","export enum ProcessingState {\n    IDLE,\n    PROCESSING,\n    CHOOSE_TEMPAI,\n    CHOOSE_KAN,\n}","import {Settings, SettingsType} from '../types/Settings'\n\nconst DEFAULT_USE_TIMER_VALUE = true\nconst DEFAULT_REMEMBER_TIME_VALUE = 60\nconst DEFAULT_DROP_TIME_VALUE = 20\nconst DEFAULT_SORT_TILES_VALUE = true\nconst DEFAULT_INVERT_TILES_VALUE = true\nconst DEFAULT_HIDE_TILES_VALUE = true\n\nexport class SettingsStorage {\n    // @ts-ignore\n    private settings: Settings = {}\n\n    private static _instance: SettingsStorage\n    static get instance(): SettingsStorage {\n        if (!this._instance) {\n            this._instance = new SettingsStorage()\n        }\n        return this._instance\n    }\n\n    private constructor() {\n        this.readSettings()\n    }\n\n    setSettings(settings: SettingsType) {\n        for (let key in settings) {\n            // @ts-ignore\n            let value = settings[key]\n            this.setItem(key, value)\n        }\n\n        this.readSettings()\n    }\n\n    getSettings(): Settings {\n        return this.settings\n    }\n\n    getDefault(): Settings {\n       return <Settings>{\n            useTimer: DEFAULT_USE_TIMER_VALUE,\n            rememberTime: DEFAULT_REMEMBER_TIME_VALUE,\n            dropTime: DEFAULT_DROP_TIME_VALUE,\n            sortTiles: DEFAULT_SORT_TILES_VALUE,\n            invertTiles: DEFAULT_INVERT_TILES_VALUE,\n            hideTiles: DEFAULT_HIDE_TILES_VALUE,\n        }\n    }\n\n    private readSettings() {\n        let hasVisited = this.getBoolValue('hasVisited', false)\n        let useTimer = this.getBoolValue('useTimer', DEFAULT_USE_TIMER_VALUE)\n        let rememberTime = this.getIntValue('rememberTime', DEFAULT_REMEMBER_TIME_VALUE)\n        let dropTime = this.getIntValue('dropTime', DEFAULT_DROP_TIME_VALUE)\n        let sortTiles = this.getBoolValue('sortTiles', DEFAULT_SORT_TILES_VALUE)\n        let invertTiles = this.getBoolValue('invertTiles', DEFAULT_INVERT_TILES_VALUE)\n        let hideTiles = this.getBoolValue('hideTiles', DEFAULT_HIDE_TILES_VALUE)\n\n\n        let settings = <Settings>{\n            useTimer: useTimer,\n            rememberTime: rememberTime,\n            dropTime: dropTime,\n            sortTiles: sortTiles,\n            invertTiles: invertTiles,\n            hideTiles: hideTiles,\n        }\n\n        let defaultSettings = this.isDefault(settings)\n        settings.defaultSettings = defaultSettings\n        settings.hasVisited = hasVisited\n        this.settings = settings\n    }\n\n    private isDefault(settings: Settings): boolean {\n        let defaultSettings = this.getDefault()\n\n        for (let key in settings) {\n            // @ts-ignore\n            if (defaultSettings[key] != settings[key]) {\n                return false\n            }\n        }\n\n        return true\n    }\n\n    private getValue(key: string): string | null {\n        return localStorage.getItem(key)\n    }\n\n    private getBoolValue(key: string, defaultValue: boolean): boolean {\n\n        switch (this.getValue(key)) {\n            case 'true':\n                return true\n            case 'false':\n                return false\n            default:\n                return defaultValue\n        }\n\n    }\n\n    private getIntValue(key: string, defaultValue: number): number {\n        let value = this.getValue(key)\n        if (value === null) {\n            return defaultValue\n        }\n\n        let intValue = Number.parseInt(value)\n        return Number.isSafeInteger(intValue) ? intValue : defaultValue\n    }\n\n    private setItem(key: string, value: any) {\n        return localStorage.setItem(key, value)\n    }\n}","import {ScreenType} from \"../types/ScreenType\";\nimport {HandService} from './HandService'\nimport {DiscardTile, Tile} from '../types/Tile'\nimport signals from 'signals';\nimport {TempaiService} from './TempaiService'\nimport {SettingsStorage} from './SettingsStorage'\nimport {Settings, SettingsType} from '../types/Settings'\nimport {ProcessingState} from \"../types/ProcessingState\";\n\ndeclare var window: any\n\nexport class StateService {\n    private handService = new HandService()\n    private tempaiService = new TempaiService()\n    private settingsStorage: SettingsStorage = SettingsStorage.instance\n\n    private initialized = false\n    // @ts-ignore\n    private _currentScreen: ScreenType\n    private previousScreen: ScreenType | undefined = undefined\n    private showRules: boolean = false\n    private processingState: ProcessingState = ProcessingState.IDLE\n    private _remainingTime: number = 0\n    private timer: NodeJS.Timeout | undefined = undefined\n\n    onChange: signals.Signal = new signals.Signal()\n    onHandChanged: signals.Signal = new signals.Signal()\n    onTimeChanged: signals.Signal = new signals.Signal()\n    onProcessingStateChanged: signals.Signal<ProcessingState> = new signals.Signal()\n\n    private static _instance: StateService\n    static get instance(): StateService {\n        if (!this._instance) {\n            this._instance = new StateService()\n            window.handService = this._instance.handService\n        }\n        return this._instance\n    }\n\n    private constructor() {\n        this.setFirstScreen(this.getSettings().hasVisited ? ScreenType.MEMORIZING : ScreenType.RULES)\n    }\n\n    nextScreen() {\n        switch (this._currentScreen) {\n            case ScreenType.RULES:\n                this.setSettings({\n                    hasVisited: true\n                })\n\n                if (this.previousScreen) {\n                    this.setScreen(this.previousScreen)\n                    this.previousScreen = undefined\n                } else {\n                    this.generateHand()\n                    this.setScreen(ScreenType.MEMORIZING)\n                }\n                break\n            case ScreenType.MEMORIZING:\n                this.handService.nextTile()\n                this.setScreen(ScreenType.PROCESSING)\n                break\n            case ScreenType.PROCESSING:\n                this.setScreen(ScreenType.FAIL)\n                break\n            case ScreenType.FAIL:\n                this.generateHand()\n                this.setScreen(ScreenType.MEMORIZING)\n                break\n            case ScreenType.SUCCESS:\n                this.generateHand()\n                this.setScreen(ScreenType.MEMORIZING)\n                break\n            case ScreenType.ABOUT:\n                if (this.previousScreen) {\n                    this.setScreen(this.previousScreen)\n                    this.previousScreen = undefined\n                } else {\n                    this.generateHand()\n                    this.setScreen(ScreenType.MEMORIZING)\n                }\n                break\n            case ScreenType.SETTINGS:\n                this.generateHand()\n                this.setScreen(ScreenType.MEMORIZING)\n                break\n        }\n    }\n\n    private generateHand() {\n        this.handService.generate(this.getSettings().sortTiles)\n    }\n\n    private setFirstScreen(screen: ScreenType) {\n        if (screen !== ScreenType.RULES && screen !== ScreenType.MEMORIZING) {\n            throw new Error(`it's impossible to start game from ${ScreenType[screen]} screen`)\n        }\n\n        if (screen === ScreenType.RULES) {\n            this._currentScreen = ScreenType.RULES\n        } else {\n            this._currentScreen = ScreenType.MEMORIZING\n            this.generateHand()\n        }\n\n        this.initialized = true\n    }\n\n    private setScreen(screen: ScreenType) {\n        this._currentScreen = screen\n        this.clear()\n\n        this.onChange.dispatch()\n    }\n\n    setSettings(settings: SettingsType) {\n        this.settingsStorage.setSettings(settings)\n    }\n\n    getSettings(): Settings {\n        return this.settingsStorage.getSettings()\n    }\n\n    getDefault(): Settings {\n        return this.settingsStorage.getDefault()\n    }\n\n    get hideTiles(): boolean {\n        return this.getSettings().hideTiles\n    }\n    get useTimer(): boolean {\n        return this.getSettings().useTimer\n    }\n    get invertTiles(): boolean {\n        return this.getSettings().invertTiles\n    }\n\n    setTimer() {\n        if (this.useTimer) {\n            this.clearTimer()\n\n            if (this._currentScreen === ScreenType.MEMORIZING) {\n                this._remainingTime = this.getSettings().rememberTime\n            }\n            if (this._currentScreen === ScreenType.PROCESSING) {\n                this._remainingTime = this.getSettings().dropTime\n            }\n\n            this.onTimeChanged.dispatch()\n            this.timer = setTimeout(() => this.onTimerTick(), 1000)\n        }\n    }\n\n    onTimerTick() {\n        if (this._remainingTime !== 0) {\n            this._remainingTime--\n            this.onTimeChanged.dispatch()\n            this.timer = setTimeout(() => this.onTimerTick(), 1000)\n        } else {\n            this.clearTimer()\n            if (this._currentScreen === ScreenType.MEMORIZING) {\n                this.nextScreen()\n            } else if (this._currentScreen === ScreenType.PROCESSING) {\n                if (this.tsumo) {\n                    this.dropTile(-1)\n\n                    if (this.handService.hasTiles) {\n                        this.handService.nextTile()\n\n                        this.onHandChanged.dispatch()\n                        this.setTimer()\n                    } else {\n                        this.setScreen(ScreenType.FAIL)\n                    }\n                }\n                this.processingState = ProcessingState.PROCESSING\n                this.onProcessingStateChanged.dispatch(this.processingState)\n            }\n        }\n    }\n\n    private clearTimer() {\n        if (this.timer) {\n            clearTimeout(this.timer)\n            this.timer = undefined\n        }\n    }\n\n    private clear() {\n        this.showRules = false\n        this.processingState = this._currentScreen === ScreenType.PROCESSING\n            ? ProcessingState.PROCESSING\n            : ProcessingState.IDLE\n\n        this.clearTimer()\n        this._remainingTime = 0\n    }\n\n    selectTile(index: number) {\n        index = this.tryInvertIndex(index)\n        switch (this.processingState) {\n            case ProcessingState.IDLE:\n                throw new Error('cannot select tile, incorrect processing state')\n            case ProcessingState.PROCESSING:\n                this.dropTileWithTimeout(index)\n                break\n            case ProcessingState.CHOOSE_TEMPAI:\n                this.dropTile(index)\n                this.checkTempai()\n                break\n            case ProcessingState.CHOOSE_KAN:\n                this.tryCallKan(index)\n                break\n        }\n    }\n\n    checkTempai() {\n        let str = this.handService.getStr()\n        if (this.tempaiService.hasTempai(str)) {\n            this.setScreen(ScreenType.SUCCESS)\n        } else {\n            this.setScreen(ScreenType.FAIL)\n        }\n    }\n\n    tryCallKan(index: number) {\n        let isValidCall = this.handService.tryCallKan(index)\n        if (isValidCall) {\n            this.processingState = ProcessingState.PROCESSING\n            this.onProcessingStateChanged.dispatch(this.processingState)\n            this.onHandChanged.dispatch()\n            this.setTimer()\n        } else {\n            this.setScreen(ScreenType.FAIL)\n        }\n    }\n\n    private dropTileWithTimeout(index: number) {\n        this.dropTile(index)\n\n        setTimeout(() => {\n            if (this.handService.hasTiles) {\n                this.handService.nextTile()\n\n                this.onHandChanged.dispatch()\n                this.setTimer()\n            } else {\n                this.setScreen(ScreenType.FAIL)\n            }\n        }, 200)\n    }\n\n    private dropTile(index: number) {\n        if (index === -1) {\n            this.handService.dropTsumo()\n        } else {\n            this.handService.dropFromHand(index)\n        }\n    }\n\n    private tryInvertIndex(index: number) {\n        return this.invertTiles && index !== -1\n            ? this.handService.getHand().length - index - 1\n            : index\n    }\n\n    chooseTempaiClicked() {\n        this.processingState = this.processingState === ProcessingState.CHOOSE_TEMPAI\n            ? ProcessingState.PROCESSING\n            : ProcessingState.CHOOSE_TEMPAI\n\n        this.onProcessingStateChanged.dispatch(this.processingState)\n    }\n\n    chooseKanClicked() {\n        this.processingState = this.processingState === ProcessingState.CHOOSE_KAN\n            ? ProcessingState.PROCESSING\n            : ProcessingState.CHOOSE_KAN\n\n        this.onProcessingStateChanged.dispatch(this.processingState)\n    }\n\n    openRules() {\n        this.clearTimer()\n        this.previousScreen = this.currentScreen\n        this.setScreen(ScreenType.RULES)\n    }\n\n    openSettings() {\n        this.clear()\n        this.setScreen(ScreenType.SETTINGS)\n    }\n\n    openAbout() {\n        this.clearTimer()\n        this.previousScreen = this.currentScreen\n        this.setScreen(ScreenType.ABOUT)\n    }\n\n    get currentScreen(): ScreenType {\n        return this._currentScreen\n    }\n\n    get hand(): Tile[] {\n        return this.handService.getHand()\n    }\n\n    get tsumo(): Tile | undefined {\n        return this.handService.getTsumo()\n    }\n\n    get kanTiles(): Tile[] {\n        return this.handService.getKanTiles()\n    }\n\n    get remainingTiles(): string {\n        let count = this.handService.remainingTiles\n        if (count > 9) {\n            return count.toString()\n        }\n\n        return '0' + count\n    }\n\n    get discard(): DiscardTile[] {\n        return this.handService.getDiscard()\n    }\n\n    get remainingTimeStr(): string {\n        let sec = this._remainingTime % 60\n        let min = Math.round((this._remainingTime - sec) / 60)\n\n        let secStr = sec > 9 ? sec : '0' + sec\n        return `${min} : ${secStr}`\n    }\n}","import {SuitType, Tile} from \"../types/Tile\";\n\nexport class TileService {\n    static getSvg(tile: Tile) {\n        switch (tile.suit) {\n            case SuitType.MANZU:\n                return this.getManTile(tile.value)\n            case SuitType.PINZU:\n                return this.getPinTile(tile.value)\n            case SuitType.SOUZU:\n                return this.getSouTile(tile.value)\n            case SuitType.JIHAI:\n                return this.getJihaiTile(tile.value)\n        }\n    }\n\n    private static getManTile(value: number) {\n        if (value > 0 && value < 10) {\n            return `man${value}`\n        }\n        throw new Error(`${value} is incorrect value for man suit`)\n    }\n\n    private static getPinTile(value: number) {\n        if (value > 0 && value < 10) {\n            return `pin${value}`\n        }\n        throw new Error(`${value} is incorrect value for pin suit`)\n    }\n\n\n    private static getSouTile(value: number) {\n        if (value > 0 && value < 10) {\n            return `sou${value}`\n        }\n        throw new Error(`${value} is incorrect value for sou suit`)\n    }\n\n    private static getJihaiTile(value: number) {\n        switch (value) {\n            case 1:\n                return 'jihaiHaku'\n            case 2:\n                return 'jihaiHatsu'\n            case 3:\n                return 'jihaiChun'\n            case 4:\n                return 'jihaiTon'\n            case 5:\n                return 'jihaiNan'\n            case 6:\n                return 'jihaiShaa'\n            case 7:\n                return 'jihaiPei'\n            default:\n                throw new Error(`${value} is incorrect value for jihai suit`)\n        }\n    }\n}","import * as React from \"react\";\nimport {Tile} from \"../types/Tile\";\nimport {TileService} from \"../services/TileService\";\nimport './tile.less';\nimport {StateService} from '../services/StateService'\n\ntype TileVisualProps = {\n    index?: number,\n    tile: Tile,\n    isTsumo: boolean,\n    highlighted: boolean,\n    isFallen: boolean,\n    selectable: boolean,\n    hidden: boolean,\n}\n\ntype TileVisualState = {\n    isDropped: boolean\n}\n\nexport class TileVisual extends React.Component<TileVisualProps, TileVisualState> {\n    stateService: StateService = StateService.instance\n\n    constructor(props: TileVisualProps) {\n        super(props);\n        this.state = {\n            isDropped: false,\n        }\n    }\n\n    componentDidMount(): void {\n        this.stateService.onHandChanged.add(this.updateState, this)\n    }\n\n    componentWillUnmount(): void {\n        this.stateService.onHandChanged.remove(this.updateState, this)\n    }\n\n    updateState() {\n        this.setState({\n            isDropped: false,\n        })\n    }\n\n    onTileSelected() {\n        if (this.props.selectable && this.props.index !== undefined) {\n            //todo not a great solution for discard visualisation\n            this.setState({\n                isDropped: true,\n            })\n\n            this.stateService.selectTile(this.props.index)\n        }\n    }\n\n    render() {\n     return (\n         <div className={`tile ${this.props.isTsumo ? ' tile--tsumo' : ''} ${this.props.highlighted ? ' tile--highlighted' : ''}`}\n              onClick={() => this.onTileSelected()}>\n             <div className={'tile__inner'}>\n                 {/*empty space*/}\n                 {this.state.isDropped && (\n                     <div className={'tile__box'}></div>\n                 )}\n\n                 {/*discard or kan*/}\n                 {!this.state.isDropped && this.props.isFallen && !this.props.hidden && (\n                     <svg viewBox={'0 0 300 370'} className='tile__box tile__box--discard'>\n                         <use xlinkHref='#tile-fallen'></use>\n                     </svg>\n                 )}\n                 {!this.state.isDropped && this.props.isFallen && this.props.hidden && (\n                     <svg viewBox={'0 0 300 370'} className='tile__box tile__box--discard'>\n                         <use xlinkHref='#tile-hidden-fallen'></use>\n                     </svg>\n                 )}\n\n                 {/*hand tiles*/}\n                 {!this.state.isDropped && !this.props.isFallen && this.props.hidden  && (\n                     <svg viewBox={'0 0 300 470'} className='tile__box'>\n                         <use xlinkHref='#tile-hidden'></use>\n                     </svg>\n                 )}\n                 {!this.state.isDropped && !this.props.isFallen && !this.props.hidden  && (\n                     <svg viewBox={'0 0 300 470'} className='tile__box'>\n                        <use xlinkHref='#tile-hand'></use>\n                     </svg>\n                 )}\n                 {!this.state.isDropped && !this.props.hidden  && (\n                     <svg viewBox={'0 0 300 400'}\n                         className={'tile__drawing' + (this.props.isFallen ? ' tile__drawing--discard' : ' tile__drawing--hand')}>\n                         <use xlinkHref={`#${TileService.getSvg(this.props.tile)}`}></use>\n                     </svg>\n                 )}\n             </div>\n         </div>\n     )\n    }\n}","import * as React from \"react\";\nimport {TileVisual} from \"./TileVisual\";\nimport {Tile} from \"../types/Tile\";\n\nexport class ExampleHandVisual extends React.Component {\n    getTile(tile: Tile) {\n        return (\n            <TileVisual tile={tile} isTsumo={false} highlighted={false} isFallen={false} selectable={false} hidden={false}/>\n        )\n    }\n\n    render() {\n     return (\n         <div className={'hand hand--example'}>\n             {this.getTile({value: 7, suit: 3})}\n             {this.getTile({value: 6, suit: 3})}\n             {this.getTile({value: 5, suit: 3})}\n             {this.getTile({value: 4, suit: 3})}\n             {this.getTile({value: 3, suit: 3})}\n             {this.getTile({value: 2, suit: 3})}\n             {this.getTile({value: 1, suit: 3})}\n\n             {this.getTile({value: 9, suit: 2})}\n             {this.getTile({value: 1, suit: 2})}\n             {this.getTile({value: 9, suit: 1})}\n             {this.getTile({value: 1, suit: 1})}\n             {this.getTile({value: 9, suit: 0})}\n             {this.getTile({value: 1, suit: 0})}\n         </div>\n     )\n    }\n}","import * as React from 'react'\nimport {StateService} from '../services/StateService'\nimport {ExampleHandVisual} from '../components/ExampleHandVisual'\n\nexport class RulesScreen extends React.Component {\n    stateService: StateService = StateService.instance\n\n    onOkClick() {\n        this.stateService.nextScreen()\n    }\n\n    render() {\n     return (\n         <div className={'rules'}>\n             <div className={'page-header'}>\n                 <div className={'page-header__title'}>\n                     How to play\n                 </div>\n             </div>\n             <div className={'page-content'}>\n                 <div className={'rules'}>\n                     You have one minute to remember a hand.\n                     <br/><br/>\n                     When you are ready, the hand is shown to you as if it is your opponent's hand — you see the back of the tiles and they are sorted in the reverse order:\n                     <br/><br/>\n                     Pei, Shaa, Nan, Ton, Chun, Hatsu, Haku, 9-1 sou, 9-1 pin, 9-1 man.\n                     <br/><br/>\n                     <ExampleHandVisual/>\n                     <br/><br/>\n                     After each draw you have 20 seconds to discard a tile. When the time runs out, tsumo tile is discarded.\n                     <br/><br/>\n                     Your goal is to complete tempai. When you believe you got tempai, press the \"Tempai\" button and select the last tile to discard.\n                     <br/><br/>\n                     If you want to stop or you have made a mistake you cannot fix, press the \"Give up\" button - current hand state will be shown to you.\n                     <br/><br/>\n                     Also you can disable inversion, hiding and other preferences\n                     in <a onClick={() => this.stateService.openSettings()}>settings</a>.\n                 </div>\n                 <div className={'flex-container flex-container--end'}>\n                     <div className={'flat-btn flat-btn--green'}>\n                         <div className={'flat-btn__caption'} onClick={() => this.onOkClick()}>Got it!</div>\n                     </div>\n                 </div>\n             </div>\n         </div>\n     )\n    }\n}","import * as React from \"react\";\nimport {TileVisual} from \"./TileVisual\";\nimport {Tile} from \"../types/Tile\";\nimport {StateService} from '../services/StateService'\n\ntype HandState = {\n    tiles: Tile[]\n    kanTiles: Tile[]\n    tsumo: Tile | undefined\n}\n\ntype HandProps = {\n    selectable: boolean\n    reverse: boolean\n    hiddenTiles: boolean\n    isOpenHand: boolean\n}\n\nexport class HandVisual extends React.Component<HandProps, HandState> {\n    stateService: StateService = StateService.instance\n\n    constructor(props: HandProps) {\n        super(props)\n\n        this.state = {\n            tiles: this.props.reverse ? this.stateService.hand.reverse() : this.stateService.hand,\n            kanTiles: this.stateService.kanTiles,\n            tsumo: this.stateService.tsumo,\n        }\n    }\n\n    componentDidMount(): void {\n        this.stateService.onHandChanged.add(this.updateState, this)\n    }\n\n    componentWillUnmount(): void {\n        this.stateService.onHandChanged.remove(this.updateState, this)\n    }\n\n    updateState() {\n        this.setState({\n            tiles: this.props.reverse ? this.stateService.hand.reverse() : this.stateService.hand,\n            tsumo: this.stateService.tsumo,\n            kanTiles: this.stateService.kanTiles\n        })\n    }\n\n    getHand() {\n        return this.state.tiles.map(this.getTile.bind(this))\n    }\n\n    getKans() {\n        return (\n            <div className='kan'>\n                {this.getAllKanTiles().map((tile, i) =>\n                    (\n                        this.getKanTile(tile, this.props.hiddenTiles || i % 4 === 0 || i % 4 === 3)\n                    )\n                )}\n            </div>\n        )\n    }\n\n    private getAllKanTiles(): Tile[] {\n        if (this.state.kanTiles.length === 1) {\n            let tile = this.state.kanTiles[0]\n            return [tile, tile, tile, tile]\n        }\n        // @ts-ignore\n        return this.state.kanTiles.reduce((a, b) => {\n            let array = Array.isArray(a)\n                ? (a as Tile[])\n                : [a ,a ,a ,a]\n\n            array.push(b)\n            array.push(b)\n            array.push(b)\n            array.push(b)\n            return array\n        })\n    }\n\n    getTile(tile: Tile, index: number) {\n        return (\n            <TileVisual tile={tile}\n                        index={index}\n                        isTsumo={false}\n                        highlighted={false}\n                        isFallen={this.props.isOpenHand}\n                        selectable={this.props.selectable}\n                        hidden={this.props.hiddenTiles}\n            />\n        )\n    }\n\n    getKanTile(tile: Tile, hidden: boolean) {\n        return (\n            <TileVisual tile={tile}\n                        isTsumo={false}\n                        highlighted={false}\n                        isFallen={true}\n                        selectable={false}\n                        hidden={hidden}\n            />\n        )\n    }\n\n    getClassName() {\n        let names = 'hand'\n\n        if (this.props.selectable) {\n            names += ' hand--selectable'\n        }\n        if (this.state.tsumo) {\n            names += ' hand--with-tsumo'\n        }\n\n        return names\n    }\n\n    render() {\n     return (\n             <div className={this.getClassName()}>\n                {this.state.tsumo && (\n                    <TileVisual\n                        tile={this.state.tsumo}\n                        isTsumo={true}\n                        index={-1}\n                        highlighted={false}\n                        isFallen={this.props.isOpenHand}\n                        selectable={this.props.selectable}\n                        hidden={false}\n                    />\n                )}\n                 {this.getHand()}\n                 {this.state.kanTiles.length !== 0 && this.getKans()}\n             </div>\n     )\n    }\n}","import * as React from \"react\";\nimport {StateService} from '../services/StateService'\n\nexport class Footer extends React.Component {\n    stateService: StateService = StateService.instance\n\n    onRulesClick() {\n        this.stateService.openRules()\n    }\n\n    onSettingsClick() {\n        this.stateService.openSettings()\n    }\n\n    onAboutClick() {\n        this.stateService.openAbout()\n    }\n\n    render() {\n     return (\n         <div className={'page-footer'}>\n             <div className={'flex-container flex-container--center flex-container--margin-s'}>\n                 <div className={'page-footer__link'} onClick={() => this.onRulesClick()}>\n                     Rules\n                 </div>\n                 <div className={'page-footer__separator'}></div>\n                 <div className={'page-footer__link'} onClick={() => this.onSettingsClick()}>\n                     Settings\n                 </div>\n                 <div className={'page-footer__separator'}></div>\n                 <div className={'page-footer__link'} onClick={() => this.onAboutClick()}>\n                     About\n                 </div>\n             </div>\n         </div>\n     )\n    }\n}","import * as React from \"react\";\nimport {HandVisual} from '../components/HandVisual'\nimport {StateService} from '../services/StateService'\nimport {Footer} from '../components/Footer'\n\ntype MemorizingScreenState = {\n    useTimer: boolean\n    remainingTime: string\n}\n\nexport class MemorizingScreen extends React.Component<any, MemorizingScreenState> {\n    stateService: StateService = StateService.instance\n\n    constructor(props: any) {\n        super(props)\n\n        this.state = {\n            useTimer: this.stateService.useTimer,\n            remainingTime: '0',\n        }\n    }\n\n    componentDidMount(): void {\n        this.stateService.onTimeChanged.add(this.onTimeChanged, this)\n        this.stateService.setTimer()\n    }\n\n    componentWillUnmount(): void {\n        this.stateService.onTimeChanged.remove(this.onTimeChanged, this)\n    }\n\n    onTimeChanged() {\n        this.setState({\n            remainingTime: this.stateService.remainingTimeStr,\n        })\n    }\n\n    goNext() {\n        this.stateService.nextScreen()\n    }\n\n    render() {\n        const {useTimer, remainingTime} = this.state\n        return (\n            <div>\n                <div className={'page-header'}>\n                    <div className={'page-header__title'}>\n                        Remember the hand\n                    </div>\n                </div>\n                <div className={'page-content'}>\n                    <div className={'flex-container' + (useTimer ? ' flex-container--between' : ' flex-container--end')}>\n                        {useTimer && (\n                            <div className={'timer'}>\n                                {remainingTime}\n                            </div>\n                        )}\n                        <div className={'flat-btn flat-btn--green'} >\n                            <div className={'flat-btn__caption'} onClick={() => this.goNext()}>Ready</div>\n                        </div>\n                    </div>\n\n                    <HandVisual selectable={false} isOpenHand={false} reverse={false} hiddenTiles={false} />\n                </div>\n                <Footer/>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport {TileVisual} from \"./TileVisual\";\nimport {DiscardTile} from \"../types/Tile\";\nimport discard from '../img/tile-fallen.svg';\nimport {StateService} from '../services/StateService'\n\ntype DiscardState = {\n    tiles: DiscardTile[]\n}\n\n//todo add subscribe to StateChanged\nexport class DiscardVisual extends React.Component<any, DiscardState> {\n    stateService: StateService = StateService.instance\n\n    constructor(props: any) {\n        super(props)\n\n        this.state = {\n            tiles: this.stateService.discard\n        }\n    }\n\n    componentDidMount(): void {\n        this.stateService.onHandChanged.add(this.updateState, this)\n    }\n\n    componentWillUnmount(): void {\n        this.stateService.onHandChanged.remove(this.updateState, this)\n    }\n\n    updateState() {\n        this.setState({\n            tiles: this.stateService.discard\n        })\n    }\n\n    getDiscard() {\n        let lines = [\n                this.state.tiles.slice(0,6),\n                this.state.tiles.slice(6,12),\n                this.state.tiles.slice(12,18),\n            ]\n        return lines.map(line => {\n            return (\n                <div className={'discard__line'}>\n                    {line.map(this.getTile)}\n                </div>\n            )\n        })\n    }\n\n    getTile(tile: DiscardTile) {\n        return (\n            <TileVisual tile={tile} isTsumo={false} highlighted={tile.tsumogiri} isFallen={true} selectable={false} hidden={false} />\n        )\n    }\n\n    render() {\n     return (\n         <div className={'discard'}>\n             {this.getDiscard()}\n         </div>\n     )\n    }\n}","import * as React from \"react\";\nimport {HandVisual} from '../components/HandVisual'\nimport {DiscardVisual} from '../components/DiscardVisual'\nimport {StateService} from '../services/StateService'\nimport {Footer} from '../components/Footer'\nimport {ProcessingState} from \"../types/ProcessingState\";\n\ntype ProcessingScreenState = {\n    hideTiles: boolean\n    useTimer: boolean\n    invertTiles: boolean\n    canCall: boolean\n    processingState: ProcessingState\n    remainingTime: string\n    remainingTiles: string\n}\n\nexport class ProcessingScreen extends React.Component<any, ProcessingScreenState> {\n    stateService: StateService = StateService.instance\n\n    constructor(props: any) {\n        super(props)\n\n        this.state = {\n            hideTiles: this.stateService.hideTiles,\n            useTimer: this.stateService.useTimer,\n            invertTiles: this.stateService.invertTiles,\n            canCall: true,\n            processingState: ProcessingState.PROCESSING,\n            remainingTime: '0',\n            remainingTiles: this.stateService.remainingTiles,\n        }\n    }\n\n    componentDidMount(): void {\n        this.stateService.onTimeChanged.add(this.onTimeChanged, this)\n        this.stateService.setTimer()\n        this.stateService.onProcessingStateChanged.add(this.onProcessingStateChanged, this)\n        this.stateService.onHandChanged.add(this.onHandChanged, this)\n    }\n\n    componentWillUnmount(): void {\n        this.stateService.onTimeChanged.remove(this.onTimeChanged, this)\n        this.stateService.onProcessingStateChanged.remove(this.onProcessingStateChanged, this)\n        this.stateService.onHandChanged.remove(this.onHandChanged, this)\n    }\n\n    onTimeChanged() {\n        this.setState({\n            remainingTime: this.stateService.remainingTimeStr,\n        })\n    }\n\n    onProcessingStateChanged(processingState: ProcessingState) {\n        this.setState({\n            processingState: processingState\n        })\n    }\n\n    onHandChanged() {\n        this.setState({\n            remainingTiles: this.stateService.remainingTiles,\n            canCall: Number(this.stateService.remainingTiles) >= 1\n        })\n    }\n\n    onTempaiClick() {\n        this.stateService.chooseTempaiClicked()\n    }\n\n    onKanClick() {\n        if (this.state.canCall) {\n            this.stateService.chooseKanClicked()\n        }\n    }\n\n    onGiveUpClick() {\n        this.stateService.nextScreen()\n    }\n\n    render() {\n        const {hideTiles, useTimer, invertTiles, canCall, processingState, remainingTime, remainingTiles} = this.state\n        return (\n            <div>\n                <div className={'page-header'}>\n                    <div className={'page-header__title'}>\n                        {processingState === ProcessingState.PROCESSING && (\n                            'Drop a tile'\n                        )}\n                        {processingState === ProcessingState.CHOOSE_TEMPAI && (\n                            'Select tempai'\n                        )}\n                        {processingState === ProcessingState.CHOOSE_KAN && (\n                            'Select kan'\n                        )}\n                    </div>\n                </div>\n                <div className='page-content'>\n                    <div className={'flex-container' + (useTimer ? ' flex-container--between' : ' flex-container--end')}>\n                        {useTimer && (\n                            <div className={'timer'}>\n                                {remainingTime}\n                            </div>\n                        )}\n                        <div className={'flex-container flex-container--end flex-container--no-margin'}>\n                            <div className={`flat-btn flat-btn--blue ${processingState === ProcessingState.CHOOSE_KAN ? 'flat-btn--pressed': ''} ${canCall ? '' : 'flat-btn--disabled'}`} >\n                                <div className={'flat-btn__caption'} onClick={() => this.onKanClick()}>Kan!</div>\n                            </div>\n                            <div className={'flat-btn flat-btn--blue' + (processingState === ProcessingState.CHOOSE_TEMPAI ? ' flat-btn--pressed' : '')} >\n                                <div className={'flat-btn__caption'} onClick={() => this.onTempaiClick()}>Tempai</div>\n                            </div>\n                        </div>\n                    </div>\n                    <HandVisual selectable={true} isOpenHand={false} reverse={invertTiles} hiddenTiles={hideTiles}/>\n                    <div className='remaining-tiles'>x{remainingTiles}</div>\n                    <DiscardVisual/>\n                    <div className={'flex-container flex-container--end'}>\n                        <div className={'flat-btn flat-btn--red'} >\n                            <div className={'flat-btn__caption'} onClick={() => this.onGiveUpClick()}>Give up</div>\n                        </div>\n                    </div>\n                </div>\n                <Footer/>\n            </div>\n        )\n    }\n}","import * as React from \"react\";\nimport {StateService} from '../services/StateService'\n\ntype NewGameBtnProps = {\n    onClick?: () => void\n}\n\nexport class NewGameBtn extends React.Component<NewGameBtnProps> {\n    stateService: StateService = StateService.instance\n\n    constructor(props: NewGameBtnProps) {\n        super(props)\n\n        this.state = {\n            tiles: this.stateService.discard\n        }\n    }\n\n    onNewGameClick() {\n        // @ts-ignore\n        ym(55440343, 'reachGoal', 'NEW_GAME')\n\n        if (this.props.onClick) {\n            this.props.onClick()\n        }\n        this.stateService.nextScreen()\n    }\n\n    render() {\n     return (\n         <div className={'flat-btn flat-btn--white'} >\n             <div className={'flat-btn__caption'} onClick={() => this.onNewGameClick()}>New game</div>\n         </div>\n     )\n    }\n}","import * as React from \"react\";\nimport {HandVisual} from '../components/HandVisual'\nimport {DiscardVisual} from '../components/DiscardVisual'\nimport {Footer} from '../components/Footer'\nimport {NewGameBtn} from '../components/NewGameBtn'\n\nexport class SuccessScreen extends React.Component {\n    render() {\n     return (\n         <div>\n             <div className={'page-header'}>\n                 <div className={'page-header__title'}>\n                     SUCCESS\n                 </div>\n             </div>\n             <div className={'page-content'}>\n                 <div className={'flex-container flex-container--end'}>\n                     <NewGameBtn/>\n                 </div>\n\n                 <HandVisual selectable={false} isOpenHand={true} reverse={false} hiddenTiles={false}/>\n                 <DiscardVisual/>\n             </div>\n             <Footer/>\n         </div>\n     )\n    }\n}","import * as React from \"react\";\nimport {HandVisual} from '../components/HandVisual'\nimport {DiscardVisual} from '../components/DiscardVisual'\nimport {Footer} from '../components/Footer'\nimport {NewGameBtn} from '../components/NewGameBtn'\n\nexport class FailScreen extends React.Component {\n    render() {\n        return (\n            <div>\n                <div className={'page-header'}>\n                    <div className={'page-header__title'}>\n                        FAIL\n                    </div>\n                </div>\n                <div className={'page-content'}>\n                    <div className={'flex-container flex-container--end'}>\n                        <NewGameBtn/>\n                    </div>\n\n                    <HandVisual selectable={false} isOpenHand={true} reverse={false} hiddenTiles={false}/>\n                    <DiscardVisual/>\n                </div>\n                <Footer/>\n            </div>\n        )\n    }\n}","import * as React from 'react'\nimport {StateService} from '../services/StateService'\n\nexport class AboutScreen extends React.Component {\n    stateService: StateService = StateService.instance\n\n    onOkClick() {\n        this.stateService.nextScreen()\n    }\n\n    render() {\n     return (\n         <div className={'about'}>\n             <div className={'page-header'}>\n                 <div className={'page-header__title'}>\n                     About\n                 </div>\n             </div>\n             <div className={'page-content'}>\n                 <div className={'about'}>\n                     Irmin is a God of <i>who knows what</i>. That's how much you know about your hand in this game.\n                     <br/><br/>\n                     This project is kind of riichi mahjong for two (but online and for one), memory trainer.\n                     <br/><br/>\n                     Repo: <a href={'https://github.com/kovavka/irmin'}>GitHub</a><br/>\n                     Me:\n                     <ul>\n                         <li>\n                             <a target={'blank'} href={'https://t.me/kovavka'}>t.me/kovavka</a>\n                         </li>\n                         <li>\n                             <a target={'blank'} href={'mailto:kovavka@gmail.com'}>kovavka@gmail.com</a>\n                         </li>\n                     </ul>\n                     <br/>\n                     <br/>\n                     Please, report bug if you get one.\n                 </div>\n                 <div className={'flex-container'}>\n                     <div className={'flat-btn flat-btn--white'}>\n                         <div className={'flat-btn__caption'} onClick={() => this.onOkClick()}>Back</div>\n                     </div>\n                 </div>\n             </div>\n         </div>\n     )\n    }\n}","import * as React from \"react\";\nimport {StateService} from '../services/StateService'\n\ntype SwitchProps = {\n    onToggle: () => void,\n    switched: boolean\n}\n\nexport class Switch extends React.Component<SwitchProps> {\n    constructor(props: SwitchProps) {\n        super(props)\n    }\n\n    onToggle() {\n        this.props.onToggle()\n    }\n\n    render() {\n     return (\n         <label className='switch' onClick={() => this.onToggle()}>\n             <span className={'switch__box' + (this.props.switched ? ' switch__box--on' : '')}></span>\n             <span className={'switch__button' + (this.props.switched ? ' switch__button--on' : '')}></span>\n         </label>\n     )\n    }\n}","import * as React from 'react'\nimport {StateService} from '../services/StateService'\nimport {NewGameBtn} from '../components/NewGameBtn'\nimport {Switch} from '../components/Switch'\nimport {SettingsType} from '../types/Settings'\n\ntype SettingsScreenState = {\n    defaultSettings: boolean\n    useTimer: boolean\n    rememberTime: number\n    dropTime: number\n    sortTiles: boolean\n    invertTiles: boolean\n    hideTiles: boolean\n}\n\nexport class SettingsScreen extends React.Component<any, SettingsScreenState> {\n    stateService: StateService = StateService.instance\n\n    constructor(props: any) {\n        super(props)\n\n        let settings = this.stateService.getSettings()\n        this.state = {\n            defaultSettings: settings.defaultSettings,\n            useTimer: settings.useTimer,\n            rememberTime: settings.rememberTime,\n            dropTime: settings.dropTime,\n            sortTiles: settings.sortTiles,\n            invertTiles: settings.invertTiles,\n            hideTiles: settings.hideTiles,\n        }\n    }\n\n    onDefaultSettingsClick() {\n        let newValue = !this.state.defaultSettings\n        if (newValue) {\n            let settings =  this.stateService.getDefault()\n            settings.defaultSettings = newValue\n            this.setState(settings)\n            this.setValue(settings)\n        } else {\n            this.setState({\n                defaultSettings: newValue\n            })\n        }\n    }\n\n    onUseTimerClick() {\n        if (!this.state.defaultSettings) {\n            let item = {\n                useTimer: !this.state.useTimer\n            }\n            this.setState(item)\n            this.setValue(item)\n        }\n    }\n\n    onSortTilesClick() {\n        if (!this.state.defaultSettings) {\n            let item = {\n                sortTiles: !this.state.sortTiles\n            }\n            this.setState(item)\n            this.setValue(item)\n        }\n    }\n\n    onInvertTilesClick() {\n        if (!this.state.defaultSettings) {\n            let item = {\n                invertTiles: !this.state.invertTiles\n            }\n            this.setState(item)\n            this.setValue(item)\n        }\n    }\n\n    onHideTilesClick() {\n        if (!this.state.defaultSettings) {\n            let item = {\n                hideTiles: !this.state.hideTiles\n            }\n            this.setState(item)\n            this.setValue(item)\n        }\n    }\n\n    rememberTimeChange(event: any) {\n        if (this.state.useTimer && this.isValidTime(event)) {\n            let item = {\n                rememberTime: event.target.value\n            }\n\n            this.setState(item)\n            this.setValue(item)\n        }\n    }\n\n    dropTimeChange(event: any) {\n        if (this.state.useTimer && this.isValidTime(event)) {\n            let item = {\n                dropTime: event.target.value\n            }\n\n            this.setState(item)\n            this.setValue(item)\n        }\n    }\n\n    private isValidTime(event: any) {\n        return event.target.validity.valid\n    }\n\n    private setValue(settings: SettingsType) {\n        this.stateService.setSettings(settings)\n    }\n\n    render() {\n        const {defaultSettings, useTimer, sortTiles, invertTiles, hideTiles} = this.state\n        return (\n            <div className='rules'>\n                <div className='page-header'>\n                    <div className='page-header__title'>\n                        Settings\n                    </div>\n                </div>\n                <div className='page-content settings'>\n                    <div className='flex-container'>\n                        <Switch\n                            switched={defaultSettings}\n                            onToggle={() => this.onDefaultSettingsClick()}\n                        />\n                        <div>Default settings</div>\n                    </div>\n                    <div className={'settings__options' + (defaultSettings ? ' settings__options--disabled' : '')}>\n                        <div className='flex-container flex-container--margin-m'>\n                            <Switch\n                                switched={useTimer}\n                                onToggle={() => this.onUseTimerClick()}\n                            />\n                            <div>Use timer</div>\n                        </div>\n                        <div className={'settings__options' + (!useTimer ? ' settings__options--disabled' : '')}>\n                            <div className='flex-container flex-container--margin-m'>\n                                <input type=\"text\" pattern=\"[0-9]{1,3}\" onInput={(value) => this.rememberTimeChange(value)} value={this.state.rememberTime} />\n                                <div>Time to remember the hand</div>\n                            </div>\n                            <div className='flex-container flex-container--margin-m'>\n                                <input type=\"text\" pattern=\"[0-9]{1,3}\" onInput={(value) => this.dropTimeChange(value)} value={this.state.dropTime} />\n                                <div>Time to choose discard</div>\n                            </div>\n                        </div>\n\n                        <div className='flex-container flex-container--margin-m'>\n                            <Switch\n                                switched={sortTiles}\n                                onToggle={() => this.onSortTilesClick()}\n                            />\n                            <div>Sort tiles</div>\n                        </div>\n                        <div className='flex-container flex-container--margin-m'>\n                            <Switch\n                                switched={invertTiles}\n                                onToggle={() => this.onInvertTilesClick()}\n                            />\n                            <div>Invert tiles</div>\n                        </div>\n                        <div className='flex-container flex-container--margin-m'>\n                            <Switch\n                                switched={hideTiles}\n                                onToggle={() => this.onHideTilesClick()}\n                            />\n                            <div>Hide tiles</div>\n                        </div>\n                    </div>\n                    <div className='flex-container flex-container--end'>\n                        <NewGameBtn/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import * as React from 'react'\nimport {StateService} from '../services/StateService'\nimport {ScreenType} from '../types/ScreenType'\nimport {RulesScreen} from './RulesScreen'\nimport {MemorizingScreen} from './MemorizingScreen'\nimport {ProcessingScreen} from './ProcessingScreen'\nimport {SuccessScreen} from './SuccessScreen'\nimport {FailScreen} from './FailScreen'\nimport {AboutScreen} from './AboutScreen'\nimport {SettingsScreen} from './SettingsScreen'\n\ntype MainState = {\n    currentScreen: ScreenType\n}\n\nexport class Main extends React.Component<any, MainState> {\n    stateService: StateService = StateService.instance\n\n    constructor(props: any) {\n        super(props)\n\n        this.state = {\n            currentScreen: this.stateService.currentScreen\n        }\n    }\n\n    componentDidMount(): void {\n        this.stateService.onChange.add(this.updateState, this)\n    }\n\n    componentWillUnmount(): void {\n        this.stateService.onChange.remove(this.updateState, this)\n    }\n\n    updateState() {\n        this.setState({\n            currentScreen: this.stateService.currentScreen\n        })\n    }\n\n    render() {\n        const currentScreen = this.stateService.currentScreen\n        return (\n            <div className=\"App\">\n                {currentScreen === ScreenType.RULES && (\n                    <RulesScreen/>\n                )}\n                {currentScreen === ScreenType.MEMORIZING && (\n                    <MemorizingScreen/>\n                )}\n                {currentScreen === ScreenType.PROCESSING && (\n                    <ProcessingScreen/>\n                )}\n                {currentScreen === ScreenType.SUCCESS && (\n                    <SuccessScreen/>\n                )}\n                {currentScreen === ScreenType.FAIL && (\n                    <FailScreen/>\n                )}\n                {currentScreen === ScreenType.ABOUT && (\n                    <AboutScreen/>\n                )}\n                {currentScreen === ScreenType.SETTINGS && (\n                    <SettingsScreen/>\n                )}\n            </div>\n        )\n    }\n}","export async function loadSpriteAsync() {\n    let response = await fetch('sprite.svg').then(res=>res.clone())\n    let spriteHtml = await response.text()\n    let node = document.querySelector('.sprite')!\n    node.innerHTML = spriteHtml\n    document.body.appendChild(node)\n}","import React from 'react'\nimport './App.less'\nimport {Main} from './screens/Main'\nimport {isMobile} from './services/Ulils'\nimport {loadSpriteAsync} from './services/SpriteLoader'\n\nconst App: React.FC = () => {\n    loadSpriteAsync()\n\n    if (isMobile()) {\n        document.querySelector('#root')!.classList.add('mobile')\n    }\n\n   return (\n        <Main/>\n  );\n}\n\nexport default App;\n","export function isMobile() {\n    return !!(navigator.userAgent.match(/Android/i)\n        || navigator.userAgent.match(/webOS/i)\n        || navigator.userAgent.match(/iPhone/i)\n        || navigator.userAgent.match(/iPad/i)\n        || navigator.userAgent.match(/iPod/i)\n        || navigator.userAgent.match(/BlackBerry/i)\n        || navigator.userAgent.match(/Windows Phone/i));\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.less';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}